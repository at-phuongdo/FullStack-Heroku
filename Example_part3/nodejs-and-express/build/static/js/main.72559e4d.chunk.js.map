{"version":3,"sources":["services/notes.js","components/Notes.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Notes","note","toggleImportance","label","important","className","content","onClick","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"yRACMA,EAAU,8BAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD5BK,EAZD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACfC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KC4E3BK,EAjFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGxB,MAAK,SAAAyB,GACJP,EAASO,QAEZ,IAEH,IAqCMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAAnB,GAAI,OAAuB,IAAnBA,EAAKG,aAU9B,OACE,6BACE,qCACA,6BACE,4BAAQG,QAAS,kBAAMQ,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAhBeK,EAAYE,KAAI,SAAApB,GAAI,OACrC,kBAAC,EAAD,CACEqB,IAAKrB,EAAKH,GACVG,KAAMA,EACNC,iBAAkB,kBAxBK,SAAAJ,GACzB,IAAMG,EAAOS,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,eAAQxB,EAAR,CAAcG,WAAYH,EAAKG,YAEhDa,EACUnB,EAAI2B,GAAahC,MAAK,SAAAiC,GAC5Bf,EAASD,EAAMW,KAAI,SAAApB,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAOyB,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACU5B,EAAKK,QADf,sCAGLK,EAASD,EAAMU,QAAO,SAAAI,GAAC,OAAIA,EAAE1B,KAAOA,SAYdgC,CAAmB7B,EAAKH,WAehD,0BAAMiC,SA5DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5B,QAASM,EACTuB,MAAM,IAAIC,MAAOC,cACjBjC,UAAWkC,KAAKC,SAAW,GAC3BzC,GAAIY,EAAM8B,OAAS,GAErBvB,EACUiB,GACPzC,MAAK,SAAAiC,GACJf,EAASD,EAAM+B,OAAOf,IACtBb,EAAW,SAiDX,2BAAO6B,MAAO9B,EAAS+B,SA7CJ,SAACX,GACxBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB7B,EAAWmB,EAAMc,OAAOJ,UA4CpB,4BAAQK,KAAK,UAAb,W,MC1ERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.72559e4d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Notes = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className=\"note\">\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Notes\n","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}